# JMH version: 1.37
# VM version: JDK 21, OpenJDK 64-Bit Server VM, 21+35-2513
# VM invoker: C:\Users\nikit\.jdks\openjdk-21\bin\java.exe
# VM options: -Dfile.encoding=windows-1251 -Duser.country=RU -Duser.language=ru -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: edu.java.mqbenchmark.KafkaWithReplicationBenchmarkTest.stressTest

# Run progress: 0,00% complete, ETA 00:01:05
# Fork: 1 of 1
# Warmup Iteration   1: 0,780 ops/s
# Warmup Iteration   2: 0,919 ops/s
# Warmup Iteration   3: 0,917 ops/s
Iteration   1: 0,960 ops/s
Iteration   2: 1,014 ops/s
Iteration   3: 1,018 ops/s
Iteration   4: 1,019 ops/s
Iteration   5: 1,019 ops/s
Iteration   6: 1,023 ops/s
Iteration   7: 1,020 ops/s
Iteration   8: 1,023 ops/s
Iteration   9: 1,022 ops/s
Iteration  10: 1,022 ops/s


Result "edu.java.mqbenchmark.KafkaWithReplicationBenchmarkTest.stressTest":
  1,014 ±(99.9%) 0,029 ops/s [Average]
  (min, avg, max) = (0,960, 1,014, 1,023), stdev = 0,019
  CI (99.9%): [0,985, 1,043] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21, OpenJDK 64-Bit Server VM, 21+35-2513
# VM invoker: C:\Users\nikit\.jdks\openjdk-21\bin\java.exe
# VM options: -Dfile.encoding=windows-1251 -Duser.country=RU -Duser.language=ru -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: edu.java.mqbenchmark.KafkaWithReplicationBenchmarkTest.testLoadBalancing

# Run progress: 20,00% complete, ETA 00:01:34
# Fork: 1 of 1
# Warmup Iteration   1: 2,571 ops/s
# Warmup Iteration   2: 3,086 ops/s
# Warmup Iteration   3: 3,081 ops/s
Iteration   1: 3,050 ops/s
Iteration   2: 3,063 ops/s
Iteration   3: 3,018 ops/s
Iteration   4: 3,058 ops/s
Iteration   5: 3,057 ops/s
Iteration   6: 3,088 ops/s
Iteration   7: 3,059 ops/s
Iteration   8: 3,054 ops/s
Iteration   9: 3,058 ops/s
Iteration  10: 3,094 ops/s


Result "edu.java.mqbenchmark.KafkaWithReplicationBenchmarkTest.testLoadBalancing":
  3,060 ±(99.9%) 0,031 ops/s [Average]
  (min, avg, max) = (3,018, 3,060, 3,094), stdev = 0,021
  CI (99.9%): [3,029, 3,091] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21, OpenJDK 64-Bit Server VM, 21+35-2513
# VM invoker: C:\Users\nikit\.jdks\openjdk-21\bin\java.exe
# VM options: -Dfile.encoding=windows-1251 -Duser.country=RU -Duser.language=ru -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: edu.java.mqbenchmark.KafkaWithReplicationBenchmarkTest.testLoadBalancingMultipleConsumers

# Run progress: 40,00% complete, ETA 00:01:03
# Fork: 1 of 1
# Warmup Iteration   1: 2,620 ops/s
# Warmup Iteration   2: 3,058 ops/s
# Warmup Iteration   3: 3,061 ops/s
Iteration   1: 3,050 ops/s
Iteration   2: 3,065 ops/s
Iteration   3: 3,062 ops/s
Iteration   4: 3,066 ops/s
Iteration   5: 3,045 ops/s
Iteration   6: 3,062 ops/s
Iteration   7: 3,061 ops/s
Iteration   8: 3,054 ops/s
Iteration   9: 3,061 ops/s
Iteration  10: 3,046 ops/s


Result "edu.java.mqbenchmark.KafkaWithReplicationBenchmarkTest.testLoadBalancingMultipleConsumers":
  3,057 ±(99.9%) 0,012 ops/s [Average]
  (min, avg, max) = (3,045, 3,057, 3,066), stdev = 0,008
  CI (99.9%): [3,045, 3,069] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21, OpenJDK 64-Bit Server VM, 21+35-2513
# VM invoker: C:\Users\nikit\.jdks\openjdk-21\bin\java.exe
# VM options: -Dfile.encoding=windows-1251 -Duser.country=RU -Duser.language=ru -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: edu.java.mqbenchmark.KafkaWithReplicationBenchmarkTest.testMultipleConsumers

# Run progress: 60,00% complete, ETA 00:00:40
# Fork: 1 of 1
# Warmup Iteration   1: 2,592 ops/s
# Warmup Iteration   2: 3,044 ops/s
# Warmup Iteration   3: 3,060 ops/s
Iteration   1: 3,062 ops/s
Iteration   2: 3,062 ops/s
Iteration   3: 3,044 ops/s
Iteration   4: 3,054 ops/s
Iteration   5: 3,061 ops/s
Iteration   6: 3,055 ops/s
Iteration   7: 3,058 ops/s
Iteration   8: 3,057 ops/s
Iteration   9: 3,053 ops/s
Iteration  10: 3,059 ops/s


Result "edu.java.mqbenchmark.KafkaWithReplicationBenchmarkTest.testMultipleConsumers":
  3,056 ±(99.9%) 0,008 ops/s [Average]
  (min, avg, max) = (3,044, 3,056, 3,062), stdev = 0,005
  CI (99.9%): [3,048, 3,065] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21, OpenJDK 64-Bit Server VM, 21+35-2513
# VM invoker: C:\Users\nikit\.jdks\openjdk-21\bin\java.exe
# VM options: -Dfile.encoding=windows-1251 -Duser.country=RU -Duser.language=ru -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: edu.java.mqbenchmark.KafkaWithReplicationBenchmarkTest.testSimpleConfig

# Run progress: 80,00% complete, ETA 00:00:19
# Fork: 1 of 1
# Warmup Iteration   1: 7,585 ops/s
# Warmup Iteration   2: 9,224 ops/s
# Warmup Iteration   3: 9,167 ops/s
Iteration   1: 9,168 ops/s
Iteration   2: 9,207 ops/s
Iteration   3: 9,176 ops/s
Iteration   4: 9,211 ops/s
Iteration   5: 9,128 ops/s
Iteration   6: 9,167 ops/s
Iteration   7: 9,158 ops/s
Iteration   8: 9,165 ops/s
Iteration   9: 9,178 ops/s
Iteration  10: 9,199 ops/s


Result "edu.java.mqbenchmark.KafkaWithReplicationBenchmarkTest.testSimpleConfig":
  9,176 ±(99.9%) 0,038 ops/s [Average]
  (min, avg, max) = (9,128, 9,176, 9,211), stdev = 0,025
  CI (99.9%): [9,138, 9,213] (assumes normal distribution)


# Run complete. Total time: 00:01:34

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                              Mode  Cnt  Score   Error  Units
KafkaWithReplicationBenchmarkTest.stressTest                          thrpt   10  1,014 ± 0,029  ops/s
KafkaWithReplicationBenchmarkTest.testLoadBalancing                   thrpt   10  3,060 ± 0,031  ops/s
KafkaWithReplicationBenchmarkTest.testLoadBalancingMultipleConsumers  thrpt   10  3,057 ± 0,012  ops/s
KafkaWithReplicationBenchmarkTest.testMultipleConsumers               thrpt   10  3,056 ± 0,008  ops/s
KafkaWithReplicationBenchmarkTest.testSimpleConfig                    thrpt   10  9,176 ± 0,038  ops/s
